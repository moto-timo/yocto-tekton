---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: meta-openembedded-run-build
  namespace: tekton-pipelines
spec:
  results:
  - name: built
    description: Yes/No status of whether a build was done
  params:
  - name: layer
    description: The layer to build for
  - name: repo-dir
    description: The path to the repo to get the git log from
  steps:
  - name: run-build
    image: registry.hub.docker.com/threexc/yocto-builder
    workingDir: /workspace
    script: |
      #!/bin/bash
      export LANG=en_US.UTF-8
      echo "layer is $(params.layer)"
      echo "repo-dir is $(params.repo-dir)"

      # Get the latest python recipe changes and bitbake them using --diff-filter for Added (A), Copied (C), 
      # Modified (M), or Renamed (R) files. The filter character lines will always start with an upper-case 
      # letter (commit hashes don't use them). Also ignore deleted files (D flag to --diff-filter)
      COMMIT_LOG=$(git -C "$(params.repo-dir)" log --name-status --oneline origin/master..origin/master-next --find-renames --diff-filter=ACMR | grep "$(params.layer)" | grep "^[A-Z]" | grep -E '.bb|.inc')
      RECIPE_NAME=""
      RECIPE_LIST=""

      # Exit cleanly if there is no difference between master and master-next
      if [ ! -z "${COMMIT_LOG}" ]; then

          # Read line-by-line from $COMMIT_LOG, and get the recipe filenames. Make sure to handle the case where
          # --diff-filter shows three words (e.g. when a version upgrade is made, it shows the diff-filter flag, 
          # the old filename, and the new filename
          while read -r line
          do
              LINE_LENGTH=$(echo "$line" | wc -w)
              if [ "$LINE_LENGTH" = "3" ]; then
                  RECIPE_NAME=$(echo "$line" | awk '{print $3}' | awk -F/ '{print $NF}' | sed 's/_.*//' | sed 's/\..*//')
              else
                  RECIPE_NAME=$(echo "$line" | awk '{print $2}' | awk -F/ '{print $NF}' | sed 's/_.*//' | sed 's/\..*//')
              fi

              # For meta-python, handle the case where a .inc file was modified, and the "recipe" it reports is e.g. 
              # python-grpcio-tools instead of python3-grpcio-tools. Do this by splitting the recipe string on the 
              # first hyphen and adding at the end of the prefix, before re-combining
              if [ "$LAYER" == "meta-python" ] && [ $? -eq 1 ]; then
                  PREFIX=$(echo "$RECIPE_NAME" | cut -d'-' -f1)
                  SUFFIX=$(echo "$RECIPE_NAME" | cut -d'-' -f2)
                  RECIPE_NAME="${PREFIX}3-${SUFFIX}"
              fi

              # Make sure what we've parsed is actually a python recipe.
              # If (and only if) it is, then add it to RECIPE_LIST
              if [ "$LAYER" == "meta-python" ]; then
                  PYTHON_CHECK=$(echo "$RECIPE_NAME" | grep python3)
                  if [ $? -eq 0 ]; then
                      RECIPE_LIST+="${RECIPE_NAME} "
                  fi
              else
                  RECIPE_LIST+="${RECIPE_NAME} "
              fi

          done < <(printf '%s\n' "$COMMIT_LOG")
      else
          RECIPE_LIST=""
      fi

      echo "${RECIPE_LIST}"

      cd poky && source oe-init-build-env build
      if [ -z "$RECIPE_LIST" ]; then
          echo "Nothing to build."
          exit 0
      else
          echo "Building the following recipes: "
          echo "$RECIPE_LIST"
          echo "$RECIPE_LIST" | xargs bitbake
      fi
    volumeMounts:
    - name: meta-openembedded-pvc
      mountPath: /workspace
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: meta-openembedded-setup-workspace
  namespace: tekton-pipelines
spec:
  steps:
  - name: clear-old-workspace
    image: registry.hub.docker.com/threexc/yocto-builder
    workingDir: /workspace
    script: |
      #!/bin/bash -xe
      
      # Remove any existing build artifacts in tmp
      if [ -d "poky/build/tmp" ]; then
          rm -rf poky/build/tmp
      fi

      # Clone the yocto-tekton repo so we can use the scripts
      if [ ! -d "yocto-tekton" ]; then
          git clone --branch generic-layer-pipeline https://github.com/threexc/yocto-tekton.git
      else
          (cd yocto-tekton && git pull --rebase)
      fi

      # Clone poky if it's not present, otherwise checkout master and
      # update
      if [ ! -d "poky" ]; then
          git clone git://git.yoctoproject.org/poky
      else
          (cd poky && git checkout master && git pull --rebase)
      fi

      # Clone meta-openembedded if it's not present, otherwise
      # checkout master-next and update
      if [ ! -d "meta-openembedded" ]; then
          git clone git://git.openembedded.org/meta-openembedded
      else
          (cd meta-openembedded && git checkout master-next && git pull --rebase)
      fi
      
      # If local.conf isn't present, then run the oe-init-build-env
      # script to create it, then add our build parameters
      if [ ! -d poky/build/conf/ ]; then
        cd poky && source oe-init-build-env build
        echo "BBLAYERS ?= \" \\
                /workspace/poky/meta \\
                /workspace/poky/meta-poky \\
                /workspace/poky/meta-yocto-bsp \\
                /workspace/meta-openembedded/meta-python \\
                /workspace/meta-openembedded/meta-oe \\
                /workspace/meta-openembedded/meta-networking \\
                /workspace/meta-openembedded/meta-filesystems \\
                /workspace/meta-openembedded/meta-webserver \\
                \"" > conf/bblayers.conf
        echo "SSTATE_MIRRORS = \"file://.* http://yocto-sstate.tekton-pipelines/poky/build/sstate-cache/PATH\"" >> conf/local.conf
        echo "USER_CLASSES += \"buildstats buildstats-summary\"" >> conf/local.conf
        echo "DISTRO_FEATURES_append = \" systemd pam polkit\"" >> conf/local.conf
        echo "DISTRO_FEATURES_BACKFILL_CONSIDERED += \"sysvinit\"" >> conf/local.conf
        echo "VIRTUAL-RUNTIME_init_manager = \"systemd\"" >> conf/local.conf
        echo "VIRTUAL-RUNTIME_initscripts = \"systemd-compat-units\"" >> conf/local.conf
        echo "INHERIT += \" testimage\"" >> conf/local.conf
        echo "QEMU_USE_SLIRP = \"1\"" >> conf/local.conf
      fi
    volumeMounts:
    - name: meta-openembedded-pvc
      mountPath: /workspace
