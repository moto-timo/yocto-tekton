---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: meta-openembedded-run-build
  namespace: tekton-pipelines
spec:
  results:
  - name: built
    description: Yes/No status of whether a build was done
  params:
  - name: layer
    description: The layer to build for
  - name: repo-dir
    description: The path to the repo to get the git log from
  steps:
  - name: run-build
    image: registry.hub.docker.com/threexc/yocto-builder
    workingDir: /workspace
    script: |
      #!/bin/bash
      export LANG=en_US.UTF-8
      RECIPES=$(yocto-tekton/pipelines/scripts/get-build-list.sh --layer "$(params.layer)" --repo-dir "$(params.repo-dir)")
      cd poky && source oe-init-build-env build
      if [ -z "$RECIPES" ]; then
          echo "Nothing to build."
          exit 0
      else
          echo "Building the following recipes: "
          echo "$RECIPE_LIST"
          echo "$RECIPE_LIST" | xargs bitbake
      fi
    volumeMounts:
    - name: meta-openembedded-pvc
      mountPath: /workspace
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: meta-openembedded-setup-workspace
  namespace: tekton-pipelines
spec:
  steps:
  - name: clear-old-workspace
    image: registry.hub.docker.com/threexc/yocto-builder
    workingDir: /workspace
    script: |
      #!/bin/bash -xe
      
      # Remove any existing build artifacts in tmp
      if [ -d "poky/build/tmp" ]; then
          rm -rf poky/build/tmp
      fi

      # Clone the yocto-tekton repo so we can use the scripts
      if [ ! -d "yocto-tekton" ]; then
          git clone --branch generic-layer-pipeline https://github.com/threexc/yocto-tekton.git
      else
          (cd yocto-tekton && git pull --rebase)
      fi

      # Clone poky if it's not present, otherwise checkout master and
      # update
      if [ ! -d "poky" ]; then
          git clone git://git.yoctoproject.org/poky
      else
          (cd poky && git checkout master && git pull --rebase)
      fi

      # Clone meta-openembedded if it's not present, otherwise
      # checkout master-next and update
      if [ ! -d "meta-openembedded" ]; then
          git clone git://git.openembedded.org/meta-openembedded
      else
          (cd meta-openembedded && git checkout master-next && git pull --rebase)
      fi
      
      # If local.conf isn't present, then run the oe-init-build-env
      # script to create it, then add our build parameters
      if [ ! -d poky/build/conf/ ]; then
        cd poky && source oe-init-build-env build
        echo "BBLAYERS ?= \" \\
                /workspace/poky/meta \\
                /workspace/poky/meta-poky \\
                /workspace/poky/meta-yocto-bsp \\
                /workspace/meta-openembedded/meta-openembedded \\
                /workspace/meta-openembedded/meta-oe \\
                /workspace/meta-openembedded/meta-networking \\
                /workspace/meta-openembedded/meta-filesystems \\
                /workspace/meta-openembedded/meta-webserver \\
                \"" > conf/bblayers.conf
        echo "SSTATE_MIRRORS = \"file://.* http://yocto-sstate.tekton-pipelines/poky/build/sstate-cache/PATH\"" >> conf/local.conf
        echo "USER_CLASSES += \"buildstats buildstats-summary\"" >> conf/local.conf
        echo "DISTRO_FEATURES_append = \" systemd pam\"" >> conf/local.conf
        echo "DISTRO_FEATURES_BACKFILL_CONSIDERED += \"sysvinit\"" >> conf/local.conf
        echo "VIRTUAL-RUNTIME_init_manager = \"systemd\"" >> conf/local.conf
        echo "VIRTUAL-RUNTIME_initscripts = \"systemd-compat-units\"" >> conf/local.conf
        echo "INHERIT += \" testimage\"" >> conf/local.conf
        echo "QEMU_USE_SLIRP = \"1\"" >> conf/local.conf
      fi
    volumeMounts:
    - name: meta-openembedded-pvc
      mountPath: /workspace
